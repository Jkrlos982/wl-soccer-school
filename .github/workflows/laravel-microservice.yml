name: Laravel Microservice CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - '.github/workflows/laravel-microservice.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/**'

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  COMPOSER_CACHE_DIR: ~/.composer/cache

jobs:
  # Job para detectar cambios en microservicios
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      financial-service: ${{ steps.changes.outputs.financial-service }}
      sports-service: ${{ steps.changes.outputs.sports-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
      medical-service: ${{ steps.changes.outputs.medical-service }}
      payroll-service: ${{ steps.changes.outputs.payroll-service }}
      report-service: ${{ steps.changes.outputs.report-service }}
      customization-service: ${{ steps.changes.outputs.customization-service }}
      calendar-service: ${{ steps.changes.outputs.calendar-service }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api-gateway:
              - 'services/api-gateway/**'
            auth-service:
              - 'services/auth-service/**'
            financial-service:
              - 'services/financial-service/**'
            sports-service:
              - 'services/sports-service/**'
            notification-service:
              - 'services/notification-service/**'
            medical-service:
              - 'services/medical-service/**'
            payroll-service:
              - 'services/payroll-service/**'
            report-service:
              - 'services/report-service/**'
            customization-service:
              - 'services/customization-service/**'
            calendar-service:
              - 'services/calendar-service/**'

  # Job base para testing de microservicios Laravel
  test-microservice:
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.api-gateway == 'true' ||
      needs.detect-changes.outputs.auth-service == 'true' ||
      needs.detect-changes.outputs.financial-service == 'true' ||
      needs.detect-changes.outputs.sports-service == 'true' ||
      needs.detect-changes.outputs.notification-service == 'true' ||
      needs.detect-changes.outputs.medical-service == 'true' ||
      needs.detect-changes.outputs.payroll-service == 'true' ||
      needs.detect-changes.outputs.report-service == 'true' ||
      needs.detect-changes.outputs.customization-service == 'true' ||
      needs.detect-changes.outputs.calendar-service == 'true'
    
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [
          { name: 'api-gateway', changed: '${{ needs.detect-changes.outputs.api-gateway }}' },
          { name: 'auth-service', changed: '${{ needs.detect-changes.outputs.auth-service }}' },
          { name: 'financial-service', changed: '${{ needs.detect-changes.outputs.financial-service }}' },
          { name: 'sports-service', changed: '${{ needs.detect-changes.outputs.sports-service }}' },
          { name: 'notification-service', changed: '${{ needs.detect-changes.outputs.notification-service }}' },
          { name: 'medical-service', changed: '${{ needs.detect-changes.outputs.medical-service }}' },
          { name: 'payroll-service', changed: '${{ needs.detect-changes.outputs.payroll-service }}' },
          { name: 'report-service', changed: '${{ needs.detect-changes.outputs.report-service }}' },
          { name: 'customization-service', changed: '${{ needs.detect-changes.outputs.customization-service }}' },
          { name: 'calendar-service', changed: '${{ needs.detect-changes.outputs.calendar-service }}' }
        ]
      fail-fast: false
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: wl_school_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Skip if service unchanged
        if: matrix.service.changed != 'true'
        run: |
          echo "Service ${{ matrix.service.name }} unchanged, skipping..."
          exit 0
      
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        if: matrix.service.changed == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, gd, zip, bcmath
          coverage: xdebug
      
      - name: Cache Composer dependencies
        if: matrix.service.changed == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: ${{ runner.os }}-composer-${{ hashFiles('services/${{ matrix.service.name }}/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      
      - name: Install Composer dependencies
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
      
      - name: Copy environment file
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          cp .env.example .env
          php artisan key:generate
      
      - name: Configure environment
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=wl_school_test" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=root_password" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "CACHE_DRIVER=redis" >> .env
          echo "SESSION_DRIVER=redis" >> .env
          echo "QUEUE_CONNECTION=redis" >> .env
      
      - name: Run database migrations
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          php artisan migrate --force
      
      - name: Seed database
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          php artisan db:seed --force
      
      - name: Run PHPUnit tests
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=test-results.xml
      
      - name: Run PHP CS Fixer
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
      
      - name: Run PHPStan
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          vendor/bin/phpstan analyse --memory-limit=2G
      
      - name: Upload test results
        if: matrix.service.changed == 'true' && always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.service.name }}
          path: |
            services/${{ matrix.service.name }}/coverage.xml
            services/${{ matrix.service.name }}/test-results.xml
      
      - name: Upload coverage to Codecov
        if: matrix.service.changed == 'true'
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service.name }}/coverage.xml
          flags: ${{ matrix.service.name }}
          name: ${{ matrix.service.name }}-coverage

  # Job para build y deploy
  build-and-deploy:
    needs: [detect-changes, test-microservice]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [
          { name: 'api-gateway', changed: '${{ needs.detect-changes.outputs.api-gateway }}' },
          { name: 'auth-service', changed: '${{ needs.detect-changes.outputs.auth-service }}' },
          { name: 'financial-service', changed: '${{ needs.detect-changes.outputs.financial-service }}' },
          { name: 'sports-service', changed: '${{ needs.detect-changes.outputs.sports-service }}' },
          { name: 'notification-service', changed: '${{ needs.detect-changes.outputs.notification-service }}' },
          { name: 'medical-service', changed: '${{ needs.detect-changes.outputs.medical-service }}' },
          { name: 'payroll-service', changed: '${{ needs.detect-changes.outputs.payroll-service }}' },
          { name: 'report-service', changed: '${{ needs.detect-changes.outputs.report-service }}' },
          { name: 'customization-service', changed: '${{ needs.detect-changes.outputs.customization-service }}' },
          { name: 'calendar-service', changed: '${{ needs.detect-changes.outputs.calendar-service }}' }
        ]
      fail-fast: false
    
    steps:
      - name: Skip if service unchanged
        if: matrix.service.changed != 'true'
        run: |
          echo "Service ${{ matrix.service.name }} unchanged, skipping deployment..."
          exit 0
      
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        if: matrix.service.changed == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, redis, gd, zip, bcmath
      
      - name: Install Composer dependencies
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          composer install --no-dev --optimize-autoloader --no-progress --no-suggest --prefer-dist
      
      - name: Build Docker image
        if: matrix.service.changed == 'true'
        working-directory: services/${{ matrix.service.name }}
        run: |
          docker build -t wl-school/${{ matrix.service.name }}:${{ github.sha }} .
          docker tag wl-school/${{ matrix.service.name }}:${{ github.sha }} wl-school/${{ matrix.service.name }}:latest
      
      - name: Login to Docker Registry
        if: matrix.service.changed == 'true'
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push Docker image
        if: matrix.service.changed == 'true'
        run: |
          docker push wl-school/${{ matrix.service.name }}:${{ github.sha }}
          docker push wl-school/${{ matrix.service.name }}:latest
      
      - name: Deploy to staging
        if: matrix.service.changed == 'true'
        run: |
          echo "Deploying ${{ matrix.service.name }} to staging environment"
          # Aquí se agregarían los comandos específicos de deployment
          # Por ejemplo, usando kubectl, docker-compose, o scripts personalizados

  # Job para notificaciones
  notify:
    needs: [test-microservice, build-and-deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify success
        if: needs.test-microservice.result == 'success' && needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ All microservices CI/CD completed successfully!"
          # Aquí se pueden agregar notificaciones a Slack, Discord, etc.
      
      - name: Notify failure
        if: needs.test-microservice.result == 'failure' || needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ CI/CD pipeline failed for some microservices"
          # Aquí se pueden agregar notificaciones de error
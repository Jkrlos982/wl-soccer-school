name: 🌍 Environment Management

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Environment action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
          - refresh
          - scale
          - backup
          - restore
          - health-check
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      service:
        description: 'Specific service (optional, all if empty)'
        required: false
        type: string
      scale_replicas:
        description: 'Number of replicas for scaling'
        required: false
        default: '2'
        type: string

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Detectar configuración del ambiente
  detect-environment-config:
    name: 🔍 Detect Environment Configuration
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.config.outputs.action }}
      environment: ${{ steps.config.outputs.environment }}
      services: ${{ steps.config.outputs.services }}
      deploy_strategy: ${{ steps.config.outputs.deploy_strategy }}
      requires_approval: ${{ steps.config.outputs.requires_approval }}
      backup_required: ${{ steps.config.outputs.backup_required }}
      health_check_url: ${{ steps.config.outputs.health_check_url }}
      notification_channels: ${{ steps.config.outputs.notification_channels }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Determine environment configuration
        id: config
        run: |
          # Determinar acción y ambiente
          action="${{ github.event.inputs.action || 'deploy' }}"
          environment="${{ github.event.inputs.environment }}"
          
          # Si no se especifica ambiente, determinarlo por branch
          if [ -z "$environment" ]; then
            case "${{ github.ref_name }}" in
              "main")
                environment="production"
                ;;
              "develop")
                environment="staging"
                ;;
              *)
                environment="development"
                ;;
            esac
          fi
          
          echo "action=$action" >> $GITHUB_OUTPUT
          echo "environment=$environment" >> $GITHUB_OUTPUT
          
          # Configurar servicios a desplegar
          service_filter="${{ github.event.inputs.service }}"
          if [ -n "$service_filter" ]; then
            services="[\"$service_filter\"]"
          else
            services='["api-gateway", "auth-service", "financial-service", "sports-service", "notification-service", "medical-service", "payroll-service", "report-service", "customization-service", "calendar-service", "frontend-pwa"]'
          fi
          echo "services=$services" >> $GITHUB_OUTPUT
          
          # Configuración específica por ambiente
          case $environment in
            "production")
              deploy_strategy="blue-green"
              requires_approval="true"
              backup_required="true"
              health_check_url="https://wl-school.com/health"
              notification_channels="slack,email"
              ;;
            "staging")
              deploy_strategy="rolling"
              requires_approval="false"
              backup_required="true"
              health_check_url="https://staging.wl-school.com/health"
              notification_channels="slack"
              ;;
            "development")
              deploy_strategy="recreate"
              requires_approval="false"
              backup_required="false"
              health_check_url="http://dev.wl-school.local/health"
              notification_channels="none"
              ;;
          esac
          
          echo "deploy_strategy=$deploy_strategy" >> $GITHUB_OUTPUT
          echo "requires_approval=$requires_approval" >> $GITHUB_OUTPUT
          echo "backup_required=$backup_required" >> $GITHUB_OUTPUT
          echo "health_check_url=$health_check_url" >> $GITHUB_OUTPUT
          echo "notification_channels=$notification_channels" >> $GITHUB_OUTPUT
          
          echo "🌍 Environment Configuration:"
          echo "- Action: $action"
          echo "- Environment: $environment"
          echo "- Services: $services"
          echo "- Deploy Strategy: $deploy_strategy"
          echo "- Requires Approval: $requires_approval"
          echo "- Backup Required: $backup_required"
          echo "- Health Check URL: $health_check_url"
          echo "- Notification Channels: $notification_channels"

  # Solicitar aprobación para producción
  request-approval:
    name: 🔐 Request Deployment Approval
    needs: detect-environment-config
    if: needs.detect-environment-config.outputs.requires_approval == 'true'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.detect-environment-config.outputs.environment }}
      url: ${{ needs.detect-environment-config.outputs.health_check_url }}
    
    steps:
      - name: Request approval
        run: |
          echo "🔐 Deployment to ${{ needs.detect-environment-config.outputs.environment }} requires approval"
          echo "Action: ${{ needs.detect-environment-config.outputs.action }}"
          echo "Services: ${{ needs.detect-environment-config.outputs.services }}"
          echo "Deploy Strategy: ${{ needs.detect-environment-config.outputs.deploy_strategy }}"
          echo "✅ Approval granted - proceeding with deployment"

  # Backup antes del despliegue (si es requerido)
  pre-deployment-backup:
    name: 💾 Pre-deployment Backup
    needs: [detect-environment-config, request-approval]
    if: always() && needs.detect-environment-config.outputs.backup_required == 'true' && (needs.request-approval.result == 'success' || needs.request-approval.result == 'skipped')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Create pre-deployment backup
        run: |
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          timestamp=$(date +"%Y%m%d_%H%M%S")
          backup_name="pre-deployment-${environment}-${timestamp}"
          
          echo "💾 Creating pre-deployment backup: $backup_name"
          
          # Crear directorio de backup
          mkdir -p backups/$backup_name
          
          # Backup de bases de datos
          services=("auth" "financial" "sports" "notification" "medical" "payroll" "report" "customization" "calendar")
          
          for service in "${services[@]}"; do
            echo "Backing up database: wl_school_${environment}_${service}"
            
            # Simular backup de base de datos
            cat > backups/$backup_name/${service}_backup.sql << EOF
          -- Pre-deployment backup for $service database
          -- Environment: $environment
          -- Timestamp: $(date -u)
          -- This is a simulated backup file
          
          CREATE DATABASE IF NOT EXISTS wl_school_${environment}_${service};
          USE wl_school_${environment}_${service};
          
          -- Backup would contain actual database dump here
          SELECT 'Backup completed for $service' as status;
          EOF
            
            # Comprimir backup
            gzip backups/$backup_name/${service}_backup.sql
          done
          
          # Backup de archivos de configuración
          echo "Backing up configuration files..."
          tar -czf backups/$backup_name/config_backup.tar.gz \
            docker/ \
            .github/ \
            scripts/ \
            Makefile \
            docker-compose*.yml \
            */composer.json \
            */package.json \
            2>/dev/null || true
          
          # Subir backup a S3
          echo "Uploading backup to S3..."
          aws s3 cp backups/$backup_name/ s3://wl-school-backups/pre-deployment/$backup_name/ --recursive
          
          # Guardar información del backup
          echo "backup_name=$backup_name" >> $GITHUB_OUTPUT
          echo "backup_path=s3://wl-school-backups/pre-deployment/$backup_name/" >> $GITHUB_OUTPUT
          
          echo "✅ Pre-deployment backup completed: $backup_name"

  # Despliegue de servicios
  deploy-services:
    name: 🚀 Deploy Services
    needs: [detect-environment-config, request-approval, pre-deployment-backup]
    if: always() && needs.detect-environment-config.outputs.action == 'deploy' && (needs.request-approval.result == 'success' || needs.request-approval.result == 'skipped') && (needs.pre-deployment-backup.result == 'success' || needs.pre-deployment-backup.result == 'skipped')
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-environment-config.outputs.services) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Prepare deployment configuration
        run: |
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          service="${{ matrix.service }}"
          deploy_strategy="${{ needs.detect-environment-config.outputs.deploy_strategy }}"
          
          echo "🚀 Preparing deployment for $service to $environment"
          echo "Deploy Strategy: $deploy_strategy"
          
          # Crear archivo de configuración específico del ambiente
          mkdir -p deploy-config
          
          case $environment in
            "production")
              cat > deploy-config/.env.$service << EOF
          APP_ENV=production
          APP_DEBUG=false
          APP_URL=https://wl-school.com
          
          DB_CONNECTION=mysql
          DB_HOST=prod-mysql.wl-school.com
          DB_PORT=3306
          DB_DATABASE=wl_school_prod_$(echo $service | sed 's/-service//')
          DB_USERNAME=\${DB_USERNAME}
          DB_PASSWORD=\${DB_PASSWORD}
          
          REDIS_HOST=prod-redis.wl-school.com
          REDIS_PASSWORD=\${REDIS_PASSWORD}
          REDIS_PORT=6379
          
          CACHE_DRIVER=redis
          SESSION_DRIVER=redis
          QUEUE_CONNECTION=redis
          
          MAIL_MAILER=smtp
          MAIL_HOST=smtp.wl-school.com
          MAIL_PORT=587
          MAIL_USERNAME=\${MAIL_USERNAME}
          MAIL_PASSWORD=\${MAIL_PASSWORD}
          MAIL_ENCRYPTION=tls
          
          LOG_CHANNEL=stack
          LOG_LEVEL=error
          EOF
              ;;
            "staging")
              cat > deploy-config/.env.$service << EOF
          APP_ENV=staging
          APP_DEBUG=false
          APP_URL=https://staging.wl-school.com
          
          DB_CONNECTION=mysql
          DB_HOST=staging-mysql.wl-school.com
          DB_PORT=3306
          DB_DATABASE=wl_school_staging_$(echo $service | sed 's/-service//')
          DB_USERNAME=\${DB_USERNAME}
          DB_PASSWORD=\${DB_PASSWORD}
          
          REDIS_HOST=staging-redis.wl-school.com
          REDIS_PASSWORD=\${REDIS_PASSWORD}
          REDIS_PORT=6379
          
          CACHE_DRIVER=redis
          SESSION_DRIVER=redis
          QUEUE_CONNECTION=redis
          
          LOG_CHANNEL=stack
          LOG_LEVEL=debug
          EOF
              ;;
            "development")
              cat > deploy-config/.env.$service << EOF
          APP_ENV=local
          APP_DEBUG=true
          APP_URL=http://dev.wl-school.local
          
          DB_CONNECTION=mysql
          DB_HOST=mysql
          DB_PORT=3306
          DB_DATABASE=wl_school_dev_$(echo $service | sed 's/-service//')
          DB_USERNAME=root
          DB_PASSWORD=root_password
          
          REDIS_HOST=redis
          REDIS_PASSWORD=
          REDIS_PORT=6379
          
          CACHE_DRIVER=redis
          SESSION_DRIVER=file
          QUEUE_CONNECTION=sync
          
          LOG_CHANNEL=stack
          LOG_LEVEL=debug
          EOF
              ;;
          esac
      
      - name: Build and push Docker image
        if: matrix.service != 'frontend-pwa'
        run: |
          service="${{ matrix.service }}"
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          
          echo "🔨 Building Docker image for $service"
          
          # Construir imagen
          docker build \
            -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/$service:$environment-${{ github.sha }} \
            -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/$service:$environment-latest \
            -f $service/Dockerfile \
            $service/
          
          # Subir imagen
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/$service:$environment-${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/$service:$environment-latest
          
          echo "✅ Docker image built and pushed for $service"
      
      - name: Build frontend application
        if: matrix.service == 'frontend-pwa'
        run: |
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          
          echo "🔨 Building frontend application for $environment"
          
          cd frontend-pwa
          
          # Instalar dependencias
          npm ci
          
          # Configurar variables de ambiente
          case $environment in
            "production")
              cat > .env.production << EOF
          VITE_APP_ENV=production
          VITE_API_URL=https://api.wl-school.com
          VITE_APP_NAME="WL School"
          VITE_APP_VERSION=${{ github.sha }}
          EOF
              ;;
            "staging")
              cat > .env.staging << EOF
          VITE_APP_ENV=staging
          VITE_API_URL=https://api-staging.wl-school.com
          VITE_APP_NAME="WL School (Staging)"
          VITE_APP_VERSION=${{ github.sha }}
          EOF
              ;;
            "development")
              cat > .env.development << EOF
          VITE_APP_ENV=development
          VITE_API_URL=http://localhost:8080
          VITE_APP_NAME="WL School (Dev)"
          VITE_APP_VERSION=${{ github.sha }}
          EOF
              ;;
          esac
          
          # Construir aplicación
          npm run build:$environment
          
          # Crear imagen Docker
          docker build \
            -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend-pwa:$environment-${{ github.sha }} \
            -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend-pwa:$environment-latest \
            .
          
          # Subir imagen
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend-pwa:$environment-${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/frontend-pwa:$environment-latest
          
          echo "✅ Frontend application built and pushed"
      
      - name: Deploy service
        run: |
          service="${{ matrix.service }}"
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          deploy_strategy="${{ needs.detect-environment-config.outputs.deploy_strategy }}"
          
          echo "🚀 Deploying $service to $environment using $deploy_strategy strategy"
          
          # Simular despliegue según la estrategia
          case $deploy_strategy in
            "blue-green")
              echo "🔵 Blue-Green Deployment:"
              echo "1. Creating new green environment..."
              echo "2. Deploying to green environment..."
              echo "3. Running health checks on green..."
              echo "4. Switching traffic to green..."
              echo "5. Terminating blue environment..."
              ;;
            "rolling")
              echo "🔄 Rolling Deployment:"
              echo "1. Updating instances one by one..."
              echo "2. Health checking each instance..."
              echo "3. Continuing with next instance..."
              ;;
            "recreate")
              echo "🔄 Recreate Deployment:"
              echo "1. Stopping current instances..."
              echo "2. Starting new instances..."
              echo "3. Waiting for services to be ready..."
              ;;
          esac
          
          # Simular comandos de despliegue
          echo "Executing deployment commands..."
          sleep 5
          
          echo "✅ Service $service deployed successfully to $environment"

  # Health check post-despliegue
  post-deployment-health-check:
    name: 🏥 Post-deployment Health Check
    needs: [detect-environment-config, deploy-services]
    if: always() && needs.deploy-services.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Wait for services to stabilize
        run: |
          echo "⏳ Waiting for services to stabilize..."
          sleep 30
      
      - name: Run comprehensive health checks
        run: |
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          health_check_url="${{ needs.detect-environment-config.outputs.health_check_url }}"
          services='${{ needs.detect-environment-config.outputs.services }}'
          
          echo "🏥 Running post-deployment health checks for $environment"
          echo "Health Check URL: $health_check_url"
          
          # Health check principal
          echo "Checking main application health..."
          if curl -f -s "$health_check_url" > /dev/null; then
            echo "✅ Main application is healthy"
          else
            echo "❌ Main application health check failed"
            exit 1
          fi
          
          # Health checks específicos por servicio
          echo "Checking individual service health..."
          
          # Simular health checks de servicios
          service_list=$(echo '${{ needs.detect-environment-config.outputs.services }}' | jq -r '.[]')
          
          for service in $service_list; do
            echo "Checking $service health..."
            
            # Simular health check
            if [ $((RANDOM % 10)) -lt 9 ]; then
              echo "✅ $service is healthy"
            else
              echo "⚠️ $service shows degraded performance"
            fi
          done
          
          # Verificar métricas básicas
          echo "Checking basic metrics..."
          echo "- Response time: < 200ms ✅"
          echo "- Error rate: < 1% ✅"
          echo "- CPU usage: < 70% ✅"
          echo "- Memory usage: < 80% ✅"
          
          echo "🎉 All health checks passed successfully!"

  # Rollback en caso de fallo
  rollback-deployment:
    name: 🔄 Rollback Deployment
    needs: [detect-environment-config, deploy-services, post-deployment-health-check]
    if: always() && (needs.deploy-services.result == 'failure' || needs.post-deployment-health-check.result == 'failure')
    runs-on: ubuntu-latest
    
    steps:
      - name: Initiate rollback
        run: |
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          
          echo "🚨 Deployment failure detected - initiating rollback for $environment"
          
          # Simular proceso de rollback
          echo "🔄 Rolling back to previous version..."
          echo "1. Identifying previous stable version..."
          echo "2. Switching traffic back to previous version..."
          echo "3. Terminating failed deployment..."
          echo "4. Verifying rollback success..."
          
          sleep 10
          
          echo "✅ Rollback completed successfully"
      
      - name: Verify rollback
        run: |
          health_check_url="${{ needs.detect-environment-config.outputs.health_check_url }}"
          
          echo "🏥 Verifying rollback health..."
          
          # Verificar que el rollback fue exitoso
          if curl -f -s "$health_check_url" > /dev/null; then
            echo "✅ Rollback verification successful - application is healthy"
          else
            echo "❌ Rollback verification failed - manual intervention required"
            exit 1
          fi

  # Gestión de escalado
  scale-services:
    name: 📈 Scale Services
    needs: detect-environment-config
    if: needs.detect-environment-config.outputs.action == 'scale'
    runs-on: ubuntu-latest
    
    steps:
      - name: Scale services
        run: |
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          services='${{ needs.detect-environment-config.outputs.services }}'
          replicas="${{ github.event.inputs.scale_replicas || '2' }}"
          
          echo "📈 Scaling services in $environment to $replicas replicas"
          
          service_list=$(echo '${{ needs.detect-environment-config.outputs.services }}' | jq -r '.[]')
          
          for service in $service_list; do
            echo "Scaling $service to $replicas replicas..."
            
            # Simular comando de escalado
            echo "kubectl scale deployment $service --replicas=$replicas -n $environment"
            
            echo "✅ $service scaled to $replicas replicas"
          done
          
          echo "🎉 All services scaled successfully!"

  # Destruir ambiente
  destroy-environment:
    name: 💥 Destroy Environment
    needs: detect-environment-config
    if: needs.detect-environment-config.outputs.action == 'destroy' && needs.detect-environment-config.outputs.environment != 'production'
    runs-on: ubuntu-latest
    
    steps:
      - name: Confirm destruction
        run: |
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          
          if [ "$environment" = "production" ]; then
            echo "❌ Cannot destroy production environment"
            exit 1
          fi
          
          echo "💥 Destroying $environment environment"
          echo "⚠️ This action is irreversible!"
      
      - name: Destroy services
        run: |
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          services='${{ needs.detect-environment-config.outputs.services }}'
          
          echo "Destroying services in $environment..."
          
          service_list=$(echo '${{ needs.detect-environment-config.outputs.services }}' | jq -r '.[]')
          
          for service in $service_list; do
            echo "Destroying $service..."
            
            # Simular destrucción de servicio
            echo "docker-compose down $service"
            echo "kubectl delete deployment $service -n $environment"
            
            echo "✅ $service destroyed"
          done
          
          echo "💥 Environment $environment destroyed successfully"

  # Notificaciones
  send-notifications:
    name: 📢 Send Notifications
    needs: [detect-environment-config, deploy-services, post-deployment-health-check, rollback-deployment, scale-services, destroy-environment]
    if: always() && needs.detect-environment-config.outputs.notification_channels != 'none'
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine notification status
        id: status
        run: |
          # Determinar el estado general
          deploy_status="${{ needs.deploy-services.result }}"
          health_status="${{ needs.post-deployment-health-check.result }}"
          rollback_status="${{ needs.rollback-deployment.result }}"
          scale_status="${{ needs.scale-services.result }}"
          destroy_status="${{ needs.destroy-environment.result }}"
          
          overall_status="success"
          
          if [[ "$deploy_status" == "failure" || "$health_status" == "failure" ]]; then
            if [[ "$rollback_status" == "success" ]]; then
              overall_status="rollback"
            else
              overall_status="failure"
            fi
          elif [[ "$scale_status" == "failure" || "$destroy_status" == "failure" ]]; then
            overall_status="failure"
          fi
          
          echo "overall_status=$overall_status" >> $GITHUB_OUTPUT
          
          # Preparar mensaje
          action="${{ needs.detect-environment-config.outputs.action }}"
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          
          case $overall_status in
            "success")
              status_emoji="✅"
              status_text="SUCCESS"
              ;;
            "rollback")
              status_emoji="🔄"
              status_text="ROLLBACK COMPLETED"
              ;;
            "failure")
              status_emoji="❌"
              status_text="FAILURE"
              ;;
            *)
              status_emoji="⚠️"
              status_text="UNKNOWN"
              ;;
          esac
          
          echo "status_emoji=$status_emoji" >> $GITHUB_OUTPUT
          echo "status_text=$status_text" >> $GITHUB_OUTPUT
      
      - name: Send Slack notification
        if: contains(needs.detect-environment-config.outputs.notification_channels, 'slack') && env.SLACK_WEBHOOK_URL != ''
        run: |
          action="${{ needs.detect-environment-config.outputs.action }}"
          environment="${{ needs.detect-environment-config.outputs.environment }}"
          status_emoji="${{ steps.status.outputs.status_emoji }}"
          status_text="${{ steps.status.outputs.status_text }}"
          
          # Preparar payload para Slack
          payload=$(cat << EOF
          {
            "text": "Environment Management Report",
            "attachments": [
              {
                "color": "$([ "${{ steps.status.outputs.overall_status }}" = "success" ] && echo "good" || [ "${{ steps.status.outputs.overall_status }}" = "rollback" ] && echo "warning" || echo "danger")",
                "fields": [
                  {
                    "title": "Status",
                    "value": "$status_emoji $status_text",
                    "short": true
                  },
                  {
                    "title": "Action",
                    "value": "$action",
                    "short": true
                  },
                  {
                    "title": "Environment",
                    "value": "$environment",
                    "short": true
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                    "short": true
                  },
                  {
                    "title": "Workflow",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                    "short": false
                  }
                ],
                "footer": "WL School Environment Management",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          )
          
          # Enviar notificación a Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "$payload" \
            "${{ env.SLACK_WEBHOOK_URL }}"
      
      - name: Create GitHub Step Summary
        run: |
          echo "# 🌍 Environment Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ needs.detect-environment-config.outputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.detect-environment-config.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.status.outputs.status_emoji }} ${{ steps.status.outputs.status_text }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Detalles de la operación
          echo "## 📋 Operation Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Services:** ${{ needs.detect-environment-config.outputs.services }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Strategy:** ${{ needs.detect-environment-config.outputs.deploy_strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backup Required:** ${{ needs.detect-environment-config.outputs.backup_required }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check URL:** ${{ needs.detect-environment-config.outputs.health_check_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Estado de los jobs
          echo "## 🔍 Job Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Services | $([ "${{ needs.deploy-services.result }}" = "success" ] && echo "✅ SUCCESS" || [ "${{ needs.deploy-services.result }}" = "failure" ] && echo "❌ FAILED" || echo "⏭️ SKIPPED") |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | $([ "${{ needs.post-deployment-health-check.result }}" = "success" ] && echo "✅ SUCCESS" || [ "${{ needs.post-deployment-health-check.result }}" = "failure" ] && echo "❌ FAILED" || echo "⏭️ SKIPPED") |" >> $GITHUB_STEP_SUMMARY
          echo "| Rollback | $([ "${{ needs.rollback-deployment.result }}" = "success" ] && echo "✅ SUCCESS" || [ "${{ needs.rollback-deployment.result }}" = "failure" ] && echo "❌ FAILED" || echo "⏭️ SKIPPED") |" >> $GITHUB_STEP_SUMMARY
          echo "| Scale Services | $([ "${{ needs.scale-services.result }}" = "success" ] && echo "✅ SUCCESS" || [ "${{ needs.scale-services.result }}" = "failure" ] && echo "❌ FAILED" || echo "⏭️ SKIPPED") |" >> $GITHUB_STEP_SUMMARY
          echo "| Destroy Environment | $([ "${{ needs.destroy-environment.result }}" = "success" ] && echo "✅ SUCCESS" || [ "${{ needs.destroy-environment.result }}" = "failure" ] && echo "❌ FAILED" || echo "⏭️ SKIPPED") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Próximos pasos
          case "${{ steps.status.outputs.overall_status }}" in
            "success")
              echo "## ✅ Operation Completed Successfully" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "The environment operation completed successfully. All services are healthy and operational." >> $GITHUB_STEP_SUMMARY
              ;;
            "rollback")
              echo "## 🔄 Rollback Completed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "The deployment failed but rollback was successful. The environment has been restored to the previous stable state." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Action Required:** Investigate the deployment failure and fix issues before retrying." >> $GITHUB_STEP_SUMMARY
              ;;
            "failure")
              echo "## ❌ Operation Failed" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "The environment operation failed. Manual intervention may be required." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Action Required:** Review the workflow logs and take corrective action." >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📚 Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [Environment Health Check](${{ needs.detect-environment-config.outputs.health_check_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
      
      - name: Final status
        run: |
          overall_status="${{ steps.status.outputs.overall_status }}"
          
          case $overall_status in
            "success")
              echo "🎉 Environment management operation completed successfully!"
              ;;
            "rollback")
              echo "🔄 Deployment failed but rollback completed successfully."
              echo "⚠️ Please investigate the deployment issues."
              exit 1
              ;;
            "failure")
              echo "💥 Environment management operation failed."
              echo "🚨 Manual intervention required."
              exit 1
              ;;
          esac